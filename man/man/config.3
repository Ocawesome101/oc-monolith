*NAME&
        config - load and save configuration in the form of Lua tables

*DESCRIPTION&
        In the beginning ~Sangar& wrote #OpenOS&, and it was stable, and it had features, and there was little fun.  And #OpenOS& was rewritten by ~Payonel&, and it had more features, and it was more stable, and there was slightly more fun.

        Then there was #Open Kernel&, and it had no features, and it was stable, and there was much rejoicing.

        And behold, then there came a new operating system called #Open Kernel 2&, and it had features, and it was stable, and there was more rejoicing.  And #Open Kernel 2& thought to itself, *what do the people want%&, and the people wanted @config&, and #Open Kernel 2& added @config&, and there was still more rejoicing.  And #Open Kernel 2& supported @config&, and #Open Kernel& did not support @config&, and thus came OS-dependence and to #Open Kernel 2& the ~Developer& sent features, but to #Open Kernel& he sent not features.  And there was some confusion.

        And the people said, let us make fun of the ~Developer& and refer to #Open Kernel 2& as "an unstable poorly-debugged mess" (which it was), and the ~Developer& was angry.  And so the ~Developer& made a new OS, which he called #Proton&, and Proton was the name of a Steam extension, and there was confusion, and #Photon& became known as #Photon&. And #Photon& supported @config&, but did not support anything else, and the ~Developer& was happy, but the people were confused.

        And ~Payonel& sold #OpenOS& with OpenComputers, and it was better than Photon, and the fiftieth OS war raged upon the land.  And behold, #Photon& was killed, and there was much rejoicing from ~Payonel&.  But the ~Developer& wrote a new operating system, and he called it #Monolith&, and #Monolith& was a new OS, and #Monolith& was good.

        And #Monolith& was good, and #Photon& was not, and #Monolith& was given features and support, and #Photon& and #Open Kernel 2& and #Open Kernel& were not.  And the OS world was a complete mess, and everyone wrote code for everyone else, and confusion abounded.

*METHODS
        load&(*file&:~string&): @table&
                Loads a table from ~file&.

        *save&(*file&:~string&, @cfg&:@table&)
                Saves a table to ~file&.

*NOTES&
        Some parts of the story may be fictionalized.

*COPYRIGHT
        Monolith Interfaces& (c) 2020 Ocawesome101 under the GNU GPLv3.

*SEE ALSO
        serialization&(*3&)
